apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "satrn.fullname" . }}
  labels:
    {{- include "satrn.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "satrn.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate # To prevent updates getting stuck claiming the volum
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "satrn.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "satrn.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.gitSync.enabled }}
        {{- include "satrn.container.git_sync" (dict "Chart" .Chart "Release" .Release "Values" .Values "sync_one_time" "true") | indent 8 }}
        {{- end }}
      containers:
        - name: satrn 
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          #env:
          #  - include "env" . | indent 12 
          command:
            {{- toYaml .Values.command | nindent 12 }}
          #  - "/usr/bin/dumb-init"
          #  - "--"
          #args:
          #  - "bash"
          #  - "-c"
          #  - "exec foo webserver"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              scheme: http
              path: "/"
              port: web
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              scheme: http
              path: /
              port: web
          {{- end }}
          # - $volumeMounts := include "volumeMounts" (dict "Release" .Release "Values" .Values "extraVolumeMounts" $extraVolumeMounts) 
          volumeMounts:
            - name: config-data
              mountPath: /config
            {{- if .Values.existingSecret }} # TODO: Deprecated
            - name: auth
              mountPath: "/config-default.edn"
              subPath: "config.edn"
              readOnly: true
            {{- end }}                            
            {{- if .Values.existingConfigMap }}
            - name: config
              mountPath: "/config-default.edn"
              subPath: "config.edn"
              readOnly: true
            {{- end }}
        {{- if .Values.gitSync.enabled }}
        {{- include "satrn.container.git_sync" . | indent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config-data
          persistentVolumeClaim:
            claimName: {{ include "satrn.fullname" . }}
        {{- if .Values.existingSecret }} # TODO: Deprecated
        - name: auth
          secret:
            secretName: {{ .Values.existingSecret }}
        {{- end }}
        {{- if .Values.existingConfigMap }}
        - name: config
          configMap:
            name: {{ .Values.existingConfigMap }}
        {{- end }}
        {{- if .Values.gitSync.enabled }}
        {{- if .Values.gitSync.sshSecret }}
        - name: git-secret
          secret:
            secretName: {{ .Values.gitSync.sshSecret }}
            defaultMode: 0644
        {{- end }}
        {{- if .Values.gitSync.sshKnownHostsSecret }}
        - name: git-known-hosts
          secret:
            secretName: {{ .Values.gitSync.sshKnownHostsSecret }}
            defaultMode: 0644
        {{- end }}
        {{- end }}
